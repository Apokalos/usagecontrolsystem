@startuml

interface MessageInterface

abstract AbstractMessage
abstract AbstractRequestMessage
abstract AbstractResponseMessage
abstract Entity
abstract Policy
abstract Request

class TryAccessRequestMessage
class StartAccessRequestMessage
class EndAccessRequestMessage

class TryAccessResponseMessage
class StartAccessResponseMessage
class EndAccessResponseMessage
class ReevaluationMessage

class RestEntity
class ApiEntity


AbstractMessage <|-- ReevaluationMessage
MessageInterface <|-- AbstractMessage
AbstractMessage <|-- AbstractRequestMessage
AbstractMessage <|-- AbstractResponseMessage
AbstractRequestMessage <|-- TryAccessRequestMessage
AbstractResponseMessage <|-- TryAccessResponseMessage
AbstractRequestMessage <|-- StartAccessRequestMessage
AbstractResponseMessage <|-- StartAccessResponseMessage
AbstractRequestMessage <|-- EndAccessRequestMessage
AbstractResponseMessage <|-- EndAccessResponseMessage
Entity <|-- RestEntity
Entity <|-- ApiEntity


interface MessageInterface {
    getMessageId() : String
    getMessageType() : MESSAGE_TYPE
    getOperationType() : OPERATION_TYPE
    getScheduled() : boolean
    getSender() : Entity
    getReceiver() : Entity
    getVersion() : String
}

abstract AbstractMessage {
    - messageId : String
    ~ messageType : MESSAGE_TYPE
    ~ operationType : OPERATION_TYPE
    ~ scheduled : boolean
    ~ sender : Entity
    ~ receiver : Entity
    ~ expectedResponse : Entity
    ~ version : String
    .. add protected getter and setter .. 
}

abstract AbstractRequestMessage {
    - sessionId : String
    + getSessionId() : String
    - setSessionId(sessionId : String)
}

abstract AbstractResponseMessage {
    ~ requestId : String
    - response : Response
    - sessionId : String
    + getResponse() : Response
    + getSessionId() : String
    + setResponse(response : Response)
    + setSessionId(sessionId : String)
    + getRequestId() : String
    ~ setMessageType(?)
}

class TryAccessRequestMessage {
    - request : Request
    - policy : Policy
    - entityPep : Entity
    + getRequest() : Request
    + getPolicy() : Policy
    + getEntityPep() : Entity
    + setRequest(request : Request)
    + setPolicy(policy : Policy)
    + setEntityPep(entity : Entity)
    .. add security checks ..
}

class StartAccessRequestMessage {
}

class EndAccessRequestMessage {

}

class TryAccessResponseMessage {
    TryAccessResponseMessage(request : TryAccessRequestMessage)
}

class StartAccessResponseMessage {
    StartAccessResponseMessage(request : StartAccessRequestMessage)
}

class EndAccessResponseMessage {
    EndAccessResponseMessage(request : EndAccessRequestMessage)
}

class ReevaluationMessage {
    - response : Response
    - sessionId : String
    + getResponse() : Response
    + getSessionId() : String
    + setResponse(response : Response)
    + setSessionId(sessionId : String)
}

abstract Entity {
    entityType : ENTITY_TYPE
    communicationMedium : COMMUNICATION_MEDIUM
}

enum MESSAGE_TYPE {
    REQUEST
    RESPONSE
    GENERIC
}
enum OPERATION_TYPE {
    TRYACCESS
    STARTACCESS
    ENDACCESS
    REEVALUATION
}

enum ENTITY_TYPE {
    CH
    SM
    PIP
    PEP
    PDP
    PAP
}

enum COMMUNICATION_MEDIUM {
    KAFKA
    REST
    API
    FILE
}





@enduml